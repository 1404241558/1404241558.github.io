<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[近来一些感悟小记录]]></title>
    <url>%2Fblog%2F2019%2F08%2F05%2F%E8%BF%91%E6%9D%A5%E4%B8%80%E4%BA%9B%E6%84%9F%E6%82%9F%E5%B0%8F%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[记录我这一段时间的心得前言2019年7月22日我从上一家公司离职了，主要的工作都是外包性质，主要从事网站建设和外贸方面的东西，现在外包的生意也变的很难做，现在网站的生意也是越来越少，所以我们经常干的工作都是无聊像是淘宝ps的工作。实在不感兴趣，就和老板讲开了，实在不感兴趣，就合约离职。找工作7月底也是高温的日子，出去找工作真的很热，还有一点，这个时间段找工作不是那么，恰好我不负众望也算是找到了很好的工作，收到了好几个offer，我虽然只干了半年的前端工作，但是我面试的都是前端1-3年的岗位，也是经历了笔试和面试，也算是过关斩将。终归是不负众望，简单的总结一下面试的心得，最直观的感受就是，现在这个阶段的就是工作没有一年时间的开发工程师，只会用别人的轮子，可以查查文档，但是随便一些基本的东西深入就什么都不知道，说白了就是没有钻研的精神。我现在也正是在往这个方向走，希望就在前端的方向多深钻一点，也不想跨路线去干后端，这也是现在工作的地方，老大给的意见，我也是这么想的。所以，就往前端的方向多深入研究。以后的打算现在公司的官网需要重新编写，我想着朝着更加酷炫的方向，我想使用vue进行编写，但是我也意识到现在的技术选型可能会出现SEO优化的问题，所以就只是接手原来的进行静态页面的编写，但是使用jq进行控制，对于后期的优化管理都是很大的问题，所以我最近一直在找关于vue方面进行SEO优化的第三方支持库，我现在找到了比较中意的就是nuxt进行编写，我现在也在着手这方面着手准备。我想从页面和到js和css等各个方面对此网站进行全方面的编写，准备使用的预编译样式是stylus，使用的ui框架是elementUI（PC），js使用的就是基本的ES6，我预测以我的进度需要大概 一个多的星期时间进行编写。公司后期的打算还有微商城的接入，对于小程序方面我还是接触到的地方比较少，所以我可能会需要更多的学习，现在在这个阶段需要尽快提高自己的自身实力。也是准备每天一到算法题，主要是练习语言的整洁性，实现高效的代码！]]></content>
      <tags>
        <tag>近来生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS垂直居中的几种办法总结]]></title>
    <url>%2Fblog%2F2019%2F07%2F28%2FCSS%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E7%9A%84%E5%87%A0%E7%A7%8D%E5%8A%9E%E6%B3%95%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[在css中居中是比较容易实现，行元素在其对应的父元素上设置text-align:center，块元素在其对应的父级元素设置margin:0 auto即可。但是垂直并没有给出的语法，需要自己写，本文用以下几种方法实现垂直居中。1.绝对定位和负margin —&gt;已知元素这种方法需要设置子元素、父级元素的宽高适用对象：块级元素123&lt;div class="box-parent"&gt; &lt;div class="box-child"&gt;&lt;/div&gt;&lt;/div&gt;12345678910111213141516171819body&#123; margin: 0; padding: 0;&#125;.box-parent&#123; position: relative; background-color: #f7f7f7; width: 500px; height: 500px;&#125;.box-child&#123; position: absolute; top: 50%; left: 50%; height: 50%; width: 50%; margin: -25%; background-color: #eee;&#125;2.绝对定位和margin —&gt;已知元素这种方法与上面的方法是类似的，在IE7会出现的问题！123&lt;div class="box-parent"&gt; &lt;div class="box-child"&gt;&lt;/div&gt;&lt;/div&gt;123456789101112131415161718192021body &#123; margin: 0; padding: 0;&#125;.box-parent &#123; position: relative; background-color: #f7f7f7; width: 500px; height: 500px;&#125;.box-child &#123; position: absolute; top: 0; bottom: 0; left: 0; right: 0; width: 50%; height: 50%; margin: auto; background-color: #eee;&#125;设置子元素的宽度，使用margin对块级子元素进行上下左右居中；其实在更多的响应式框架中，width都是自适应的，高度可以设置px，这两种方法都是可以继承父元素的宽高不需要再设置的，换句话说就是，父元素的宽高就是继承即可，不能继承空值。3.padding的方式 —&gt;不需要知道使用padding的方式进行垂直居中；123&lt;div class="box-parent"&gt; &lt;div class="box-child"&gt;&lt;/div&gt;&lt;/div&gt;12345678910111213body &#123; margin: 0; padding: 0;&#125;.box-parent &#123; position: relative; background-color: #f7f7f7; padding: 5%;&#125;.box-child &#123; padding: 10%; background-color: #eee;&#125;4.table的方式 —&gt;已知元素给父元素设置table，对单元格进行垂直居中；123&lt;div class="box-parent"&gt; &lt;div class="box-child"&gt;我要居中&lt;/div&gt;&lt;/div&gt;12345678910111213141516body &#123; margin: 0; padding: 0;&#125;.box-parent &#123; display: table; width: 500px; height: 500px;&#125;.box-child &#123; display: table-cell; vertical-align: middle; background-color: yellow; text-align: center; color: red;&#125;这种居中方式是通过table设置单元格的方式 + vertical-align：middle，当设置table-cell不起作用的时候就是换成dispaly：inline-block5.line-height设置行高的方式 —&gt;已知元素这种方式是专门对于文本内容的，只需要将子元素的行高设置和父元素的一样即可。6.float+负margin的方式 —&gt;已知元素1234&lt;div class="box-parent"&gt; &lt;div class="float"&gt;&lt;/div&gt; &lt;div class="box-child"&gt;我要居中&lt;/div&gt;&lt;/div&gt;123456789101112131415161718192021222324body &#123; margin: 0; padding: 0;&#125;.box-parent &#123; width: 500px; height: 500px; background-color: yellow; z-index: 1;&#125;.float&#123; float: left; height: 50%; width: 100%; z-index: 2; margin-bottom: -100px; background-color: aliceblue;&#125;.box-child &#123; clear: both; z-index: 3!important; height: 200px; background-color: antiquewhite;&#125;这种方式太过复杂，需要不断的计算，以此达到垂直的目的7.translate+position的方式 —&gt;未知元素这种方式解决未知元素的垂直居中问题1234&lt;div class="box"&gt; &lt;div class="content"&gt; &lt;/div&gt;&lt;/div&gt;123456789101112131415.box &#123; background-color: aliceblue; width: 500px; height: 500px; position: relative;&#125;.content &#123; background-color: #FFFFFF; width: 200px; height: 200px; position: absolute; left: 50%; top: 50%; transform: translate(-50%,-50%);&#125;8.flex的方式1234&lt;div class="box"&gt; &lt;div class="content"&gt; &lt;/div&gt;&lt;/div&gt;12345678910111213.box &#123; background-color: aliceblue; width: 500px; height: 500px; display: flex; justify-content: center; align-items: center;&#125;.content &#123; background-color: #FFFFFF; width: 200px; height: 200px;&#125;这种方式是比较强大的，是css3所支持的盒子模型，很多新的响应式都是基于盒子模型的。这个里面很多的方式及在不同的场景进行应用的，在一个div中里面包含文字的，本来就是很难处理的，因为跟传递过来的字数长度，以及语言都是有关系的，文字的垂直居中就不是很容易处理。但是通常垂直居中加省略号的方式会比较好看一点，最好的方式就是能够用图说话的地方尽量少用文字，尽量多使用img标签而不用定位背景图，这样更利于SEO。]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[浏览器引入iconfont彩色字体]]></title>
    <url>%2Fblog%2F2019%2F07%2F24%2F%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BC%95%E5%85%A5iconfont%E5%BD%A9%E8%89%B2%E5%AD%97%E4%BD%93%2F</url>
    <content type="text"><![CDATA[国内引入字体库基本都是使用阿里的iconfont，现在越来越多的开发场景需要使用到这种图标字体。使用这种图标字体解决了以前引入精灵图的诸多缺点。现在做前端开发，基本上都会使用上各种图标字体。今天要说的是引入iconfont的彩色字体图标。基本上大家都知道，当我们使用unicode或者font class的方式引入字体图标的时候，我们需要在自定义的css文件重新设置颜色，但是有时候满足不了相对应的场景。比如这个Vue的图标通常的时候我们只能通过图片去引入，但是现在iconfont+，推出了彩色图标的使用方法，摆脱了小图片的烦恼。官方给出的做法是引入symbol的字体图标js文件，其实打开js文件，就是将字体图标打包成SVG的形式，同时最不同的path填充相应的颜色1&lt;script src="你的字体图标js文件" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;在css中声明icon，例如:12345678.icon&#123; width: 1em; height: 1em; vertical-align: -0.15em; fill: currentColor; overflow: hidden; font-size: 3em;&#125;123&lt;svg class="icon" aria-hidden="true"&gt; &lt;use xlink:href="#字体类名"&gt;&lt;/use&gt;&lt;/svg&gt;xlink前面的#号不需要改变，因为js中生成的svg的id就是与此对应。本博客的关于我页面中，我的技能就是使用带颜色的字体图标显示的。]]></content>
      <categories>
        <category>icon</category>
      </categories>
      <tags>
        <tag>icon</tag>
      </tags>
  </entry>
</search>
