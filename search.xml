<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[关于JS中类数组对象的一点理解]]></title>
    <url>%2Fposts%2Faf7034fe.html</url>
    <content type="text"><![CDATA[最近看见有个人写的面试题目里面有一题：jq获取的DOM节点对象是数组么？结论其实问题很简单的，jq获取的是一种类数组对象，是一个Object,他是不能够调用数组方法的；实际操作如图，我们可以使用原生的方法来仿照获取到类数组对象，比如document.getElementByClassName、querySelectAll等等我们使用如下的方式创建一个text页面进行测试，测试结果如下：123456789101112131415161718192021222324&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div class="box1"&gt;&lt;/div&gt; &lt;div class="box1"&gt;&lt;/div&gt; &lt;div class="box1"&gt;&lt;/div&gt; &lt;div class="box1"&gt;&lt;/div&gt; &lt;script type="text/javascript"&gt; const boxList = document.getElementsByClassName('box1') console.log("boxList的类型:", Array.isArray(boxList)) console.log("boxList的原型:",boxList.__proto__) const boxArr = Array.from(boxList) console.log("boxList的类型:",Array.isArray(boxArr)) boxArr.forEach(function(item)&#123; console.log("boxArr-item:",item) &#125;) console.log("boxArr的原型:",boxArr.__proto__) &lt;/script&gt; &lt;/body&gt;&lt;/html&gt;这个时候我们就能够清楚的看到，我们获取到的类数组对象是一个HTMLSelection对象，而且是Symbol类型的，它仅仅具有length属性，和一些Symbol类型的方法；但是和使用from方法转成数组的boxArr还是有区别的防止杠精，本质上都是对象，都是Object类但是我们可以清楚的知道，现在我们获取到的DOM节点对象里面的值保存的是类数组对象，他不可以像正常的数组一样，使用数组方法，为什么非要这样呢？当初设计的时候为什么不直接生成一个数组呢？近一步寻找答案再研究发现，其实我们可以将一个对象伪装成一个数组来用，比如123456789let a = &#123;&#125;for(let i = 0; i &lt; 10; i++)&#123; a[i] = i * i&#125;a.length = ilet total = 0for(let j = 0; j &lt; a.length; j++)&#123; total += a[j]&#125;上述a就是一个类数组对象我们可以比较一下类数组对象和数组之间的区别区别一个是对象，一个是数组，但是本质上都是对象，这个就不要争论了关于legth属性问题，当新的元素添加到列表当中的时候，数组的length会及时刷新，类数组则不会数组的length属性可以实现数组的扩展和截断功能数组可以操作原型上的方法，而类数组只能操作他拥有的方法关于类数组对象的实例function函数内部的arguments对象就是一个类数组对象获取Dom节点的方法jq中的$(‘’)我们可以看一下jq中的部分源码：1234567891011121314jQuery = window.jQuery = window.$ = function(selector, context) &#123; return new jQuery.fn.init(selector, context); &#125;, jQuery.fn = jQuery.prototype = &#123; init: function(selector, context) &#123; selector = selector || document; // Handle $(DOMElement) if (selector.nodeType) &#123; this[0] = selector; this.length = 1; this.context = selector; return this; &#125; &#125;在这里面，我们就可以看见selector就是原生的DOM对象，this指向jq使用$()构造的对象，此时dom就作为对象的第一个属性值object[0]这个时候我们大概对类数组对象有一点认识，但是对于为什么不在根源上使用数组进行存储，这个问题我还需要进一步了解。。。目前还没找到答案！类数组对象转为数组方法的一些总结]]></content>
      <tags>
        <tag>学习整理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[修改VSCode 截图直接粘贴到MarkDown 上传到七牛云的插件]]></title>
    <url>%2Fposts%2F5cbc86d9.html</url>
    <content type="text"><![CDATA[最近搁置了一段时间的博客又捡起来了，在写博客的过程中不免需要将图片的链接复制到博客中去。在VSCode 中使用原生的编辑器是不带直接将截图上传到七牛云并粘贴成文本链接的。所以写下这篇文章的目的也是为了以后如果换电脑了，能够提醒我重新再修改一下插件（我也可能将我修改的插件上传到VSCode上面）这篇文章可以帮你解决截屏图片粘贴到md文件中，直接上传到七牛云上面，能够显示正确的路径，我在VSCode插件中心搜索的都是不够正确显示路径的插件，能够粘贴到md中，但是还是需要修改七牛的路径，也就是你粘贴的图片的网络地址是不正确的。这篇文章就是帮你解决这些问题过程1.搜索插件当我们在插件中心搜索qiniu这个上面可以看到很多的插件，但是比较多的就是我安装的下面的插件，大概有1000个下载量，我安装的是另外一个人对他的修改版本，我猜应该会更好，就安装了但是在安装的过程中就是发现了问题：每当我粘贴复制图片到md文件中都会出现路径不对的问题2.解决问题在我阅读他们源码的时候发现了问题，这个时候你需要打开VSCode 源码插件存放的位置我的存放位置是C:\Users\Administrator\.vscode\extensions，到这个目录下面就可以看见一大堆你安装的插件，你需要找到带类似qiniu字段插件，并根据时间排列你就会发现将整个项目导入到你的代码编辑器中，修改如下在lib/upload.js文件中修改：将url.resolve()替换成path.join()12345678910111213141516return new Promise((resolve, reject) =&gt; &#123; const extra = new PutExtra() qiniu.io.putFile(token, saveFile, localFile, extra, (err, &#123; key &#125;) =&gt; &#123; if (!err) &#123; resolve(&#123; name: path.basename(key, param.ext), // 返回相对路径 url: path.join(domain, saveFile) &#125;) &#125; else &#123; reject(err) &#125; &#125;)&#125;) 这个时候其实已经可以正确的显示路径，他显示出来的路径中的反斜杠是这样的”/“，所以需要修改根目录下的extension.js12345678910111213141516qnUpload(config, imagePath, mdFilePath).then((&#123; name, url&#125;) =&gt; &#123; // 这是先将第一个获取到的http:\\换成http:// url = url.replace(/\\/, "\/\/") // 第二次将链接中的所有 \ 换成 / url = url.replace(/\\/g, "\/") vscode.window.showInformationMessage('上传成功'); const img = `![$&#123;name&#125;]($&#123;url&#125;)`; editor.edit(textEditorEdit =&gt; &#123; textEditorEdit.insert(editor.selection.active, img) &#125;);&#125;).catch((err) =&gt; &#123; vscode.window.showErrorMessage('Upload error.');&#125;); 这个时候将VSCode中的setting.json进行如下配置12345678910111213141516// 有效的七牛 AccessKey 签名授权"pasteImageToQiniu.access_key": "",// 有效的七牛 SecretKey 签名授权"pasteImageToQiniu.secret_key": "",// 七牛图片上传空间"pasteImageToQiniu.bucket": "",// 七牛图片上传路径，参数化命名，暂时支持 $&#123;fileName&#125;、$&#123;mdFileName&#125;、$&#123;date&#125;、$&#123;dateTime&#125;// 示例：// $&#123;fileName&#125;-$&#123;date&#125; -&gt; picName-20160725.jpg// $&#123;mdFileName&#125;-$&#123;dateTime&#125; -&gt; markdownName-20170412222810.jpg// 推荐使用这种方式"pasteImageToQiniu.remotePath": "blog-$&#123;dateTime&#125;",// 七牛图床域名，这个http：//还是带上比较好，那样你在typora里面进行预览就能看见图片了，不然看不到图片"pasteImageToQiniu.domain": "http://七牛域名",// 本地储存位置"pasteImageToQiniu.localPath":"本地保存文件地址"到目前为止，你就可以使用CTRL+ALT+V在你需要图片的地方上传图片，你再去七牛空间上面确认一下即可！如果有问题欢迎留言！]]></content>
      <categories>
        <category>VSCode</category>
      </categories>
      <tags>
        <tag>VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2019 推荐几款男女通吃老少皆宜的VSCode 主题]]></title>
    <url>%2Fposts%2Fc236e71b.html</url>
    <content type="text"><![CDATA[我是做前端开发的，可能在视觉方面喜欢折腾，所以我总是在网上找好看的主题，但是自己又不想去完完整整的开发一个视觉主题，所以就决定总结归纳一下现在收集的样式主题。选取标准随着安装的主题不断的变多，我也摸索出来了我的一套选择主题标准对于长久的进行敲代码，眼睛不会变得很累（相对来说）这个相对于黑白两大色系来说，总的来说白色的主题看的时间长了，眼睛会比较难受，这是我的感受，暗色系的主题就稍微缓和的时间比较长一些左侧列表栏目是否清晰很多的主题都没有考虑这个问题，左侧的颜色太鲜亮导致项目以及相关文件名称看不清楚，特别在长时间工作，这样还要特意的去找，就会感觉很累最左侧的模块切换图标也是同样的问题就是看不清楚主编辑区的代码样式关键词代码的颜色搭配是否友好，这东西就是一眼看上去，到底舒服还是不舒服，这是很主观的反应常规代码区分是否明显，其实这个很重要，常规代码其实在原有主题上面能够清晰阅读就足够，不需要太突出，太标新立异，这样看起来就很难受使用搜索关键词进行搜索的时候，是否能够清晰的看见自己搜索的关键词代码，但是很多的主题都是忽略了这个问题，在有很长的代码的时候，搜索功能就变得很重要主编辑区上方的标签卡是否能够清晰的提示，因为在比较大的项目中，可能会开很多个选项卡，如果标签卡不能够清晰的分辨出来，工作时间长了就会很累我感觉这些方面都做的很好，然后页面内部的颜色搭配也比较舒服，那就是一个优秀的主题推荐几款主题1.Material Theme 2.Atom One Theme 3.Solarized Theme 4.Horizon Theme 其实主题这个东西有几个系列就够了，每天写代码时间长了，可以换一个风格，当然也可以自己去看别人的源码，自己DIY一个，如果这篇博客被更多人的看见，我可以再出一个DIY的案例]]></content>
      <categories>
        <category>VSCode</category>
      </categories>
      <tags>
        <tag>VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于Vue全局使用socket.io的详细解释]]></title>
    <url>%2Fposts%2F3197c66b.html</url>
    <content type="text"><![CDATA[关于Vue全局使用socket.io的详细解释前言&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;了解使用socket.io之前我们需要了解WebSocket，这个东西可能对刚接触的人来说，看的越多越懵，其实对比了解他们的区别，就知道了WebSocket。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其实说到套接字，我们可以从以下几个关键词说起：TCP/UDP协议网络通信的条件说到这些东西，计算机专业的都不会陌生，说白了websocket就是基于TCP协议进行传输数据的单元，这是面向连接的可靠的流式套接字。而基于UDP协议的套接字是面向不可靠的数据报套接字。而我们这次说的也是基于TCP的套接字连接。网络通信的条件：连接使用的协议本机IP本地进程协议端口远地主机IP远地进程协议端口WebSocket协议在2008年诞生，2011年成为国际标准。现在所有浏览器都已经支持了。WebSocket也是HTML 5规范的组成部分之一，现标准版本为 RFC 6455。WebSocket 相较于上述几种连接方式，实现原理较为复杂，用一句话概括就是：客户端向 WebSocket 服务器通知（notify）一个带有所有 接收者ID（recipients IDs） 的事件（event），服务器接收后立即通知所有活跃的（active）客户端，只有ID在接收者ID序列中的客户端才会处理这个事件。由于 WebSocket 本身是基于TCP协议的，所以在服务器端我们可以采用构建 TCP Socket 服务器的方式来构建 WebSocket 服务器。这个 WebSocket 是一种全新的协议。它将 TCP 的 Socket（套接字）应用在了web page上，从而使通信双方建立起一个保持在活动状态连接通道，并且属于全双工（双方同时进行双向通信）。其实是这样的，WebSocket 协议是借用 HTTP协议 的 101 switch protocol 来达到协议转换的，从HTTP协议切换成WebSocket通信协议。它的最大特点就是，服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息，是真正的双向平等对话，属于服务器推送技术的一种。也有人把他说成是双向Ajax，网页上的IM以及同步游戏都可以使用这个WebSocket实现。这里我们可以看出，使用网页上的WebSocket的通信，其实就是一种“HttpRequest”请求，但又有所不同，我们需要准备连接的IP以及端口号，而本地的端口号，再发送HTTP请求的时候，而这些浏览器已经帮你完成了。那么我们其实还要注意一点，当我们发送websocket请求连接的时候，浏览器是怎么知道我们这次到底是http请求，还是WebSocket。这里我们就能看见，发送WebSocket连接的时候我们会在Request Header中的connection字段，将其设置为upgrade,意思就是将其升级为WebSocket，我们也可以看到在response相应头部中已经有upgrade：webscoket字段，正常的HTTP请求是看不到的。这个时候就说明我们已经在使用WebSocket进行通信了。简单的了解他的一些特点、工作机制，知道了连接的过程，我们还需要了解其相关的API。这个东西的核心功能也就是那么几个，我们可以从发送接受一个消息的实例来举例说明：发送消息之前，需要连接 —connect连接成功，我们可能需要监听服务器发过来的消息 —onMesssage连接成功，我们也可以发送消息 —send连接过程中，我们发生消息出现错误 —onError完成通信后，关闭连接 —onClose其实，主要就是这几个方法，具体指的是什么方法，这里可以参照链接WebSocket API，如果感觉了解的不够，可以看一下WebSocket官方文档翻译——HTML5 Web Sockets:A Quantum Leap in Scalability for the Web到这里其实我们算把WebSocket基本上说了一遍，但是我们对基于WebSocket封装的socket.io 还是只字未提，我们可以通过对比WebSocket来了解他：相同点都需要建立TCP连接都是属于七层协议中的应用层协议WebSocket传统通过HTTP请求模拟双向数据传递的方式是http+Polling(轮询)和http+Long Polling(长轮询)。轮询(Polling)就是客户端定时发送get请求向服务端请求数据，这种方式能满足一定的需求，但是存在一些问题，如果服务端没有新数据，但是客户端get请求到的数据都是旧数据，这样不仅浪费了带宽资源，而且占用CPU内存。LongPolling(长轮询)就是在Polling上的一些改进，即如果服务端没有新数据返回给客户端，服务端会把当前的这个get请求保持住(hold)，当有新数据时则返回新数据，如果超过一定时间服务端仍没有新数据，则服务端返回超时请求，客户端接收到超时请求，然后在发送get请求，一直循环执行。虽然一定程度解决了带宽资源和CPU内存浪费情况，但是当服务端数据更新很快，这和轮询（Polling）没有本质上的区别，而且http数据包的头部数据量往往很大（通常有400多个字节），但是真正被服务器需要的数据却很少（有时只有10个字节左右），这样的数据包在网络上周期性的传输，难免对网络带宽是一种浪费。在高并发的情况下，这对服务器是一个很大的挑战。综合上面轮询的种种问题，Websocket终于华丽的登上了舞台。socket.ioSocket.io是一个WebSocket库，包括了客户端的js和服务器端的nodejs，它的目标是构建可以在不同浏览器和移动设备上使用的实时应用。也就是说，Websocket仅仅是 Socket.io实现实时通信的一个子集。因此Websocket客户端连接不上Socket.io服务端，当然Socket.io客户端也连接不上Websocket服务端。它会自动根据浏览器从WebSocket、AJAX长轮询、Iframe流等等各种方式中选择最佳的方式来实现网络实时应用，非常方便和人性化，而且支持的浏览器最低达IE5.5socket.io特点实时分析：将数据推送到客户端，这些客户端会被表示为实时计数器，图表或日志客户。实时通信和聊天：只需几行代码便可写成一个Socket.IO的”Hello,World”聊天应用。二进制流传输：从1.0版本开始，Socket.IO支持任何形式的二进制文件传输，例如：图片，视频，音频等。文档合并：允许多个用户同时编辑一个文档，并且能够看到每个用户做出的修改。Vue 全局使用socket.io安装引入12npm i vue-socket.io -Snpm i socket.io-client -S全局引入12345678910111213import VueSocketio from &apos;vue-socket.io&apos;;import io from &apos;socket.io-client&apos;;Vue.use(new VueSocketIO(&#123; debug: true, connection: &apos;ws地址:端口号&apos;, // connection: io(ws地址:端口号) // 这两种连接方式都没有问题 vuex: &#123; // 根据实际需求添加 store, actionPrefix: &apos;SOCKET_&apos;, mutationPrefix: &apos;SOCKET_&apos; &#125;&#125;))发送消息的方法1this.$socket.emit(&apos;message&apos;, value) // message字段需要后台定义接受消息的方法123456789101112sockets: &#123; connect: function() &#123; console.log(&apos;socket connected&apos;) &#125;, message: function(res) &#123; // const data = res if (res !== &apos;我是服务器都安发送的信息&apos;) &#123; // console.log(JSON.parse(res)) &#125; &#125;&#125;这个需要房子sockets这个字段中，层级与methods,computed同级如果使用Vuex来管理websocket数据，定义方法，在组件中使用，将监听接受的数据commit到state中即可[参考资料]WebSocket官方文档翻译——HTML5 Web Sockets:A Quantum Leap in Scalability for the WebWebSocket APIWebSocket W3CSchool 中文文档Websocket和Socket.io的区别及应用]]></content>
      <categories>
        <category>WebSocket</category>
      </categories>
      <tags>
        <tag>学习整理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[近来一些感悟小记录]]></title>
    <url>%2Fposts%2Fbdfe6e8f.html</url>
    <content type="text"><![CDATA[Welcome to my blog, enter password to read. Incorrect Password! No content to display! ]]></content>
      <tags>
        <tag>近来生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS垂直居中的几种办法总结]]></title>
    <url>%2Fposts%2F8f413f34.html</url>
    <content type="text"><![CDATA[在css中居中是比较容易实现，行元素在其对应的父元素上设置text-align:center，块元素在其对应的父级元素设置margin:0 auto即可。但是垂直并没有给出的语法，需要自己写，本文用以下几种方法实现垂直居中。1.绝对定位和负margin —&gt;已知元素这种方法需要设置子元素、父级元素的宽高适用对象：块级元素123&lt;div class="box-parent"&gt; &lt;div class="box-child"&gt;&lt;/div&gt;&lt;/div&gt;12345678910111213141516171819body&#123; margin: 0; padding: 0;&#125;.box-parent&#123; position: relative; background-color: #f7f7f7; width: 500px; height: 500px;&#125;.box-child&#123; position: absolute; top: 50%; left: 50%; height: 50%; width: 50%; margin: -25%; background-color: #eee;&#125;2.绝对定位和margin —&gt;已知元素这种方法与上面的方法是类似的，在IE7会出现的问题！123&lt;div class="box-parent"&gt; &lt;div class="box-child"&gt;&lt;/div&gt;&lt;/div&gt;123456789101112131415161718192021body &#123; margin: 0; padding: 0;&#125;.box-parent &#123; position: relative; background-color: #f7f7f7; width: 500px; height: 500px;&#125;.box-child &#123; position: absolute; top: 0; bottom: 0; left: 0; right: 0; width: 50%; height: 50%; margin: auto; background-color: #eee;&#125;设置子元素的宽度，使用margin对块级子元素进行上下左右居中；其实在更多的响应式框架中，width都是自适应的，高度可以设置px，这两种方法都是可以继承父元素的宽高不需要再设置的，换句话说就是，父元素的宽高就是继承即可，不能继承空值。3.padding的方式 —&gt;不需要知道使用padding的方式进行垂直居中；123&lt;div class="box-parent"&gt; &lt;div class="box-child"&gt;&lt;/div&gt;&lt;/div&gt;12345678910111213body &#123; margin: 0; padding: 0;&#125;.box-parent &#123; position: relative; background-color: #f7f7f7; padding: 5%;&#125;.box-child &#123; padding: 10%; background-color: #eee;&#125;4.table的方式 —&gt;已知元素给父元素设置table，对单元格进行垂直居中；123&lt;div class="box-parent"&gt; &lt;div class="box-child"&gt;我要居中&lt;/div&gt;&lt;/div&gt;12345678910111213141516body &#123; margin: 0; padding: 0;&#125;.box-parent &#123; display: table; width: 500px; height: 500px;&#125;.box-child &#123; display: table-cell; vertical-align: middle; background-color: yellow; text-align: center; color: red;&#125;这种居中方式是通过table设置单元格的方式 + vertical-align：middle，当设置table-cell不起作用的时候就是换成dispaly：inline-block5.line-height设置行高的方式 —&gt;已知元素这种方式是专门对于文本内容的，只需要将子元素的行高设置和父元素的一样即可。6.float+负margin的方式 —&gt;已知元素1234&lt;div class="box-parent"&gt; &lt;div class="float"&gt;&lt;/div&gt; &lt;div class="box-child"&gt;我要居中&lt;/div&gt;&lt;/div&gt;123456789101112131415161718192021222324body &#123; margin: 0; padding: 0;&#125;.box-parent &#123; width: 500px; height: 500px; background-color: yellow; z-index: 1;&#125;.float&#123; float: left; height: 50%; width: 100%; z-index: 2; margin-bottom: -100px; background-color: aliceblue;&#125;.box-child &#123; clear: both; z-index: 3!important; height: 200px; background-color: antiquewhite;&#125;这种方式太过复杂，需要不断的计算，以此达到垂直的目的7.translate+position的方式 —&gt;未知元素这种方式解决未知元素的垂直居中问题1234&lt;div class="box"&gt; &lt;div class="content"&gt; &lt;/div&gt;&lt;/div&gt;123456789101112131415.box &#123; background-color: aliceblue; width: 500px; height: 500px; position: relative;&#125;.content &#123; background-color: #FFFFFF; width: 200px; height: 200px; position: absolute; left: 50%; top: 50%; transform: translate(-50%,-50%);&#125;8.flex的方式1234&lt;div class="box"&gt; &lt;div class="content"&gt; &lt;/div&gt;&lt;/div&gt;12345678910111213.box &#123; background-color: aliceblue; width: 500px; height: 500px; display: flex; justify-content: center; align-items: center;&#125;.content &#123; background-color: #FFFFFF; width: 200px; height: 200px;&#125;这种方式是比较强大的，是css3所支持的盒子模型，很多新的响应式都是基于盒子模型的。这个里面很多的方式及在不同的场景进行应用的，在一个div中里面包含文字的，本来就是很难处理的，因为跟传递过来的字数长度，以及语言都是有关系的，文字的垂直居中就不是很容易处理。但是通常垂直居中加省略号的方式会比较好看一点，最好的方式就是能够用图说话的地方尽量少用文字，尽量多使用img标签而不用定位背景图，这样更利于SEO。]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[浏览器引入iconfont彩色字体]]></title>
    <url>%2Fposts%2F75f3f02b.html</url>
    <content type="text"><![CDATA[国内引入字体库基本都是使用阿里的iconfont，现在越来越多的开发场景需要使用到这种图标字体。使用这种图标字体解决了以前引入精灵图的诸多缺点。现在做前端开发，基本上都会使用上各种图标字体。今天要说的是引入iconfont的彩色字体图标。基本上大家都知道，当我们使用unicode或者font class的方式引入字体图标的时候，我们需要在自定义的css文件重新设置颜色，但是有时候满足不了相对应的场景。比如这个Vue的图标通常的时候我们只能通过图片去引入，但是现在iconfont+，推出了彩色图标的使用方法，摆脱了小图片的烦恼。官方给出的做法是引入symbol的字体图标js文件，其实打开js文件，就是将字体图标打包成SVG的形式，同时最不同的path填充相应的颜色1&lt;script src="你的字体图标js文件" type="text/javascript" charset="utf-8"&gt;&lt;/script&gt;在css中声明icon，例如:12345678.icon&#123; width: 1em; height: 1em; vertical-align: -0.15em; fill: currentColor; overflow: hidden; font-size: 3em;&#125;123&lt;svg class="icon" aria-hidden="true"&gt; &lt;use xlink:href="#字体类名"&gt;&lt;/use&gt;&lt;/svg&gt;xlink前面的#号不需要改变，因为js中生成的svg的id就是与此对应。本博客的关于我页面中，我的技能就是使用带颜色的字体图标显示的。]]></content>
      <categories>
        <category>icon</category>
      </categories>
      <tags>
        <tag>icon</tag>
      </tags>
  </entry>
</search>
